// Generated by CoffeeScript 1.3.3
(function() {
  var ContentAddressable, TreeStore, computeHash, deserialize, memoryStore, serialize, _;

  _ = require('underscore');

  computeHash = require('./utils').hash;

  ContentAddressable = require('content-addressable');

  memoryStore = require('pluggable-store').server().memory;

  serialize = function(obj) {
    var sort, sorted;
    sort = function(arr) {
      return arr.sort(function(a, b) {
        return a[0] > b[0];
      });
    };
    obj.childTrees = sort(_.pairs(obj.childTrees));
    obj.childData = sort(_.pairs(obj.childData));
    obj.ancestors = obj.ancestors.sort();
    sorted = sort(_.pairs(obj));
    return JSON.stringify(sorted);
  };

  deserialize = function(string) {
    var parsed;
    parsed = _.object(JSON.parse(string));
    parsed.childTrees = _.object(parsed.childTrees);
    parsed.childData = _.object(parsed.childData);
    return parsed;
  };

  TreeStore = (function() {

    function TreeStore() {
      this.store = new ContentAddressable({
        store: memoryStore()
      });
    }

    TreeStore.prototype.write = function(tree) {
      var json;
      json = serialize(tree);
      return this.store.write(json);
    };

    TreeStore.prototype.read = function(hash) {
      return deserialize(this.store.read(hash));
    };

    TreeStore.prototype.readAll = function(hashs) {
      var each, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = hashs.length; _i < _len; _i++) {
        each = hashs[_i];
        _results.push(this.read(each));
      }
      return _results;
    };

    TreeStore.prototype.writeAll = function(trees) {
      var each, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = trees.length; _i < _len; _i++) {
        each = trees[_i];
        _results.push(this.write(each));
      }
      return _results;
    };

    return TreeStore;

  })();

  module.exports = TreeStore;

}).call(this);
