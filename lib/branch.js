// Generated by CoffeeScript 1.3.3
(function() {
  var Branch, EventEmitter, async, normalize, normalizeAll, normalizeDeltaParams, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  async = require('async');

  _ = require('underscore');

  EventEmitter = require('eventemitter2').EventEmitter2;

  normalizeAll = function(commitsOrBranches) {
    var each, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = commitsOrBranches.length; _i < _len; _i++) {
      each = commitsOrBranches[_i];
      _results.push(normalize(each));
    }
    return _results;
  };

  normalize = function(commitOrBranch) {
    if (commitOrBranch.constructor === Branch) {
      return commitOrBranch.head;
    } else {
      return commitOrBranch;
    }
  };

  normalizeDeltaParams = function(from, to, head) {
    head = head ? [head] : [];
    if (from) {
      return {
        from: normalizeAll(from),
        to: head
      };
    } else {
      if (to) {
        return {
          from: head,
          to: normalizeAll(to)
        };
      } else {
        return {
          from: [],
          to: head
        };
      }
    }
  };

  Branch = (function(_super) {

    __extends(Branch, _super);

    function Branch(repo, head) {
      this.repo = repo;
      this.head = head;
    }

    Branch.prototype.commit = function(data, cb) {
      var obj;
      obj = this;
      return this.repo.commit(this.head, data, function(err, head) {
        obj.head = head;
        obj.emit('postCommit', this.head);
        return cb(null, head);
      });
    };

    Branch.prototype.treeAtPath = function(path, cb) {
      return this.repo.treeAtPath(this.head, path, cb);
    };

    Branch.prototype.dataAtPath = function(path, cb) {
      return this.repo.dataAtPath(this.head, path, cb);
    };

    Branch.prototype.allPaths = function(cb) {
      return this.repo.allPaths(this.head, cb);
    };

    Branch.prototype.commonCommit = function(ref, cb) {
      return this.repo.commonCommit(this.head, normalize(ref), cb);
    };

    Branch.prototype.commonCommitWithPaths = function(ref, cb) {
      return this.repo.commonCommitWithPaths(this.head, normalize(ref), cb);
    };

    Branch.prototype.diff = function(ref, cb) {
      return this.repo.diff(this.head, normalize(ref), cb);
    };

    Branch.prototype.deltaHashs = function(_arg, cb) {
      var from, to, _ref;
      _ref = _arg != null ? _arg : {}, from = _ref.from, to = _ref.to;
      return this.repo.deltaHashs(normalizeDeltaParams(from, to, this.head), cb);
    };

    Branch.prototype.deltaData = function(_arg, cb) {
      var from, to, _ref;
      _ref = _arg != null ? _arg : {}, from = _ref.from, to = _ref.to;
      return this.repo.deltaData(normalizeDeltaParams(from, to, this.head), cb);
    };

    Branch.prototype.merge = function(_arg, cb) {
      var obj, ref, strategy;
      ref = _arg.ref, strategy = _arg.strategy;
      obj = this;
      return this.repo.merge(this.head, normalize(ref), strategy, function(err, head) {
        obj.head = head;
        return cb(null, head);
      });
    };

    return Branch;

  })(EventEmitter);

  module.exports = Branch;

}).call(this);
