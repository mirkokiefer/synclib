// Generated by CoffeeScript 1.3.3
(function() {
  var Branch, EventEmitter, async, tree, trees, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  async = require('async');

  _ = require('underscore');

  EventEmitter = require('eventemitter2').EventEmitter2;

  trees = function(treesOrBranches) {
    var each, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = treesOrBranches.length; _i < _len; _i++) {
      each = treesOrBranches[_i];
      _results.push(tree(each));
    }
    return _results;
  };

  tree = function(treeOrBranch) {
    if (treeOrBranch.constructor === Branch) {
      return treeOrBranch.head;
    } else {
      return treeOrBranch;
    }
  };

  Branch = (function(_super) {

    __extends(Branch, _super);

    function Branch(repo, head) {
      this.repo = repo;
      this.head = head;
    }

    Branch.prototype.commit = function(data) {
      this.head = this.repo.commit(this.head, data);
      this.emit('postCommit', this.head);
      return this.head;
    };

    Branch.prototype.treeAtPath = function(path) {
      return this.repo.treeAtPath(this.head, path);
    };

    Branch.prototype.dataAtPath = function(path) {
      return this.repo.dataAtPath(this.head, path);
    };

    Branch.prototype.allPaths = function() {
      return this.repo.allPaths(this.head);
    };

    Branch.prototype.commonCommit = function(ref) {
      return this.repo.commonCommit(this.head, tree(ref));
    };

    Branch.prototype.diff = function(ref) {
      return this.repo.diff(this.head, tree(ref));
    };

    Branch.prototype.deltaHashs = function(_arg) {
      var from, to, _ref, _ref1;
      _ref = _arg != null ? _arg : {}, from = _ref.from, to = _ref.to;
      _ref1 = from ? [trees(from), [this.head]] : to ? [[this.head], trees(to)] : [[], [this.head]], from = _ref1[0], to = _ref1[1];
      return this.repo.deltaHashs({
        from: from,
        to: to
      });
    };

    Branch.prototype.merge = function(_arg) {
      var obj, ref, strategy;
      ref = _arg.ref, strategy = _arg.strategy;
      obj = this;
      return this.head = this.repo.merge(this.head, tree(ref), strategy);
    };

    return Branch;

  })(EventEmitter);

  module.exports = Branch;

}).call(this);
