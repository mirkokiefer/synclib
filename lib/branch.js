// Generated by CoffeeScript 1.3.3
(function() {
  var Branch, async, tree, _;

  async = require('async');

  _ = require('underscore');

  tree = function(treeOrBranch) {
    if (treeOrBranch.constructor === Branch) {
      return treeOrBranch.head;
    } else {
      return treeOrBranch;
    }
  };

  Branch = (function() {

    function Branch(repo, head) {
      this.repo = repo;
      this.head = head;
    }

    Branch.prototype.commit = function(data) {
      return this.head = this.repo.commit(this.head, data);
    };

    Branch.prototype.treeAtPath = function(path, cb) {
      return this.repo.treeAtPath(this.head, path, cb);
    };

    Branch.prototype.dataAtPath = function(path) {
      return this.repo.dataAtPath(this.head, path);
    };

    Branch.prototype.commonCommit = function(ref) {
      return this.repo.commonCommit(this.head, tree(ref));
    };

    Branch.prototype.diff = function(ref) {
      return this.repo.diff(this.head, tree(ref));
    };

    Branch.prototype.patchHashs = function(_arg) {
      var from, to, _ref, _ref1;
      _ref = _arg != null ? _arg : {}, from = _ref.from, to = _ref.to;
      _ref1 = (!from) && (!to) ? [null, this.head] : from ? [tree(from), this.head] : [this.head, tree(to)], from = _ref1[0], to = _ref1[1];
      return this.repo.patchHashs({
        from: from,
        to: to
      });
    };

    Branch.prototype.merge = function(_arg, cb) {
      var obj, ref, strategy;
      ref = _arg.ref, strategy = _arg.strategy;
      obj = this;
      return this.repo.merge(this.head, tree(ref), strategy, function(err, head) {
        obj.head = head;
        return cb(null, head);
      });
    };

    return Branch;

  })();

  module.exports = Branch;

}).call(this);
