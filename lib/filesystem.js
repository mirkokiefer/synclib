// Generated by CoffeeScript 1.3.3
(function() {
  var FileSystem, dataDir, exec, fs, getDataPath, getTreePath, removeDir, resolvePath, treeDir;

  fs = require('fs');

  resolvePath = (require('path')).resolve;

  exec = require('child_process').exec;

  removeDir = function(dir, cb) {
    return exec('rm -r -f ' + dir, cb);
  };

  treeDir = 'tree';

  dataDir = 'data';

  getTreePath = function(hash) {
    return treeDir + '/' + hash;
  };

  getDataPath = function(hash) {
    return dataDir + '/' + hash;
  };

  FileSystem = (function() {

    function FileSystem(rootPath) {
      var each, paths, _i, _len;
      this.rootPath = rootPath;
      this._treePath = resolvePath(this.rootPath, treeDir);
      this._dataPath = resolvePath(this.rootPath, dataDir);
      paths = [this.rootPath, this._treePath, this._dataPath];
      try {
        for (_i = 0, _len = paths.length; _i < _len; _i++) {
          each = paths[_i];
          if (!fs.exists(each)) {
            fs.mkdirSync(each);
          }
        }
      } catch (_error) {}
    }

    FileSystem.prototype.writeTree = function(path, data, cb) {
      return this.write(this.treePath(path), data, cb);
    };

    FileSystem.prototype.readTree = function(path, cb) {
      return this.read(this.treePath(path), cb);
    };

    FileSystem.prototype.writeData = function(path, data, cb) {
      return this.write(this.dataPath(path), data, cb);
    };

    FileSystem.prototype.readData = function(path, cb) {
      return this.read(this.dataPath(path), cb);
    };

    FileSystem.prototype.removeData = function(path, cb) {
      return this.remove(this.dataPath(path), cb);
    };

    FileSystem.prototype.write = function(path, data, cb) {
      return fs.writeFile(path, data, 'utf8', cb);
    };

    FileSystem.prototype.read = function(path, cb) {
      return fs.readFile(path, 'utf8', cb);
    };

    FileSystem.prototype.remove = function(path, cb) {
      return fs.unlink(path, cb);
    };

    FileSystem.prototype.treePath = function(path) {
      return resolvePath(this._treePath, path + '.txt');
    };

    FileSystem.prototype.dataPath = function(path) {
      return resolvePath(this._dataPath, path + '.txt');
    };

    FileSystem.prototype["delete"] = function(cb) {
      return removeDir(this.rootPath, cb);
    };

    return FileSystem;

  })();

  module.exports = FileSystem;

}).call(this);
